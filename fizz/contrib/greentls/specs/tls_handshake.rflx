package TLS_Handshake is

   type Handshake_Type is (
      HANDSHAKE_CLIENT_HELLO => 1,
      HANDSHAKE_SERVER_HELLO => 2,
      HANDSHAKE_NEW_SESSION_TICKET => 4,
      HANDSHAKE_END_OF_EARLY_DATA => 5,
      HANDSHAKE_ENCRYPTED_EXTENSIONS => 8,
      HANDSHAKE_CERTIFICATE => 11,
      HANDSHAKE_CERTIFICATE_REQUEST => 13,
      HANDSHAKE_CERTIFICATE_VERIFY => 15,
      HANDSHAKE_FINISHED => 20,
      HANDSHAKE_KEY_UPDATE => 24,
      HANDSHAKE_COMPRESSED_CERTIFICATE => 25,  -- draft-ietf-tls-certificate-compression
      HANDSHAKE_MESSAGE_HASH => 254
   ) with Size => 8;

   type Length_Type is mod 2**24;

   type Handshake is
      message
         Tag : Handshake_Type;
         Length : Length_Type
            then Payload
               with Length => Length * 8;
         Payload : Payload_Type;
      end message;

   -- Extensions

   type Extension_Type is (
      EXTENSION_SERVER_NAME => 0,
      EXTENSION_MAX_FRAGMENT_LENGTH => 1,  -- unsupported
      EXTENSION_STATUS_REQUEST => 5,  -- unsupported
      EXTENSION_SUPPORTED_GROUPS => 10,
      EXTENSION_SIGNATURE_ALGORITHMS => 13,
      EXTENSION_USE_SRTP => 14,  -- unsupported
      EXTENSION_HEARTBEAT => 15,  -- unsupported
      EXTENSION_APPLICATION_LAYER_PROTOCOL_NEGOTIATION => 16,
      EXTENSION_SIGNED_CERTIFICATE_TIMESTAMP => 18,  -- unsupported
      EXTENSION_CLIENT_CERTIFICATE_TYPE => 19,  -- unsupported
      EXTENSION_SERVER_CERTIFICATE_TYPE => 20,  -- unsupported
      EXTENSION_PADDING => 21,  -- unsupported
      EXTENSION_PRE_SHARED_KEY => 41,
      EXTENSION_EARLY_DATA => 42,
      EXTENSION_SUPPORTED_VERSIONS => 43,
      EXTENSION_COOKIE => 44,
      EXTENSION_PSK_KEY_EXCHANGE_MODES => 45,
      EXTENSION_CERTIFICATE_AUTHORITIES => 47,
      EXTENSION_OID_FILTERS => 48,
      EXTENSION_POST_HANDSHAKE_AUTH => 49,
      EXTENSION_SIGNATURE_ALGORITHMS_CERT => 50,
      EXTENSION_KEY_SHARE => 51
   ) with Size => 16, Always_Valid;

   type Data_Length_Type is range 0 .. 2**16 - 1 with Size => 16;

   type Extension is
      message
         Tag : Extension_Type;
         Data_Length : Data_Length_Type
            then Data
               with Length => Data_Length;
         Data : Payload_Type;
      end message;

   type Extensions is array of Extension;

   type CH_Extension is new Extension;
   type CH_Extensions is array of CH_Extension;

   type SH_Extension is new Extension;
   type SH_Extensions is array of SH_Extension;

   type HRR_Extension is new Extension;
   type HRR_Extensions is array of HRR_Extension;

   type EE_Extension is new Extension;
   type EE_Extensions is array of EE_Extension;

   type CT_Extension is new Extension;
   type CT_Extensions is array of CT_Extension;

   type CR_Extension is new Extension;
   type CR_Extensions is array of CR_Extension;

   type NST_Extension is new Extension;
   type NST_Extensions is array of NST_Extension;

   -- Key Exchange Messages

   type Protocol_Version_Type is (TLS_1_0 => 16#0301#, TLS_1_1 => 16#0302#, TLS_1_2 => 16#0303#, TLS_1_3 => 16#0304#) with Size => 16;
   type Legacy_Session_ID_Length_Type is range 0 .. 32 with Size => 8;
   type Cipher_Suites_Length_Type is range 2 .. 2**16 - 2 with Size => 16;
   type Cipher_Suite_Type is (TLS_AES_128_GCM_SHA256 => 16#1301#, TLS_AES_256_GCM_SHA384 => 16#1302#, TLS_CHACHA20_POLY1305_SHA256 => 16#1303#, TLS_AES_128_CCM_SHA256 => 16#1304#, TLS_AES_128_CCM_8_SHA256 => 16#1305#) with Size => 16;
   type Cipher_Suites is array of Cipher_Suite_Type;
   type Legacy_Compression_Methods_Length_Type is range 1 .. 1 with Size => 8;
   type Legacy_Compression_Methods_Type is range 0 .. 0 with Size => 8;
   type Client_Hello_Extensions_Length_Type is range 8 .. 2**16 - 1 with Size => 16;

   type Client_Hello is
      message
         Legacy_Version : Protocol_Version_Type
            then Random
               with Length => 32 * 8
               if Legacy_Version = TLS_1_2;
         Random : Payload_Type;
         Legacy_Session_ID_Length : Legacy_Session_ID_Length_Type
            then Legacy_Session_ID
               with Length => Legacy_Session_ID_Length * 8;
         Legacy_Session_ID : Payload_Type;
         Cipher_Suites_Length : Cipher_Suites_Length_Type
            then Cipher_Suites
               with Length => Cipher_Suites_Length * 8;
         Cipher_Suites : Cipher_Suites;
         Legacy_Compression_Methods_Length : Legacy_Compression_Methods_Length_Type
            then Legacy_Compression_Methods
               with Length => Legacy_Compression_Methods_Length * 8;
         Legacy_Compression_Methods : Legacy_Compression_Methods_Type
            then null
               if Message'Last / 8 = Legacy_Compression_Methods'Last / 8,
            then Extensions_Length
               if Message'Last / 8 /= Legacy_Compression_Methods'Last / 8;
         Extensions_Length : Client_Hello_Extensions_Length_Type
            then Extensions
               with Length => Extensions_Length * 8;
         Extensions : CH_Extensions;
      end message;

   for Handshake use (Payload => Client_Hello)
      if Tag = HANDSHAKE_CLIENT_HELLO;

   type Legacy_Compression_Method_Type is range 0 .. 0 with Size => 8;
   type Server_Hello_Extensions_Length_Type is range 6 .. 2**16 - 1 with Size => 16;

   type Server_Hello is
      message
         Legacy_Version : Protocol_Version_Type
            then Random
               with Length => 32 * 8
               if Legacy_Version = TLS_1_2;
         Random : Payload_Type;
         Legacy_Session_ID_Length : Legacy_Session_ID_Length_Type
            then Legacy_Session_ID
               with Length => Legacy_Session_ID_Length * 8;
         Legacy_Session_ID : Payload_Type;
         Cipher_Suite : Cipher_Suite_Type;
         Legacy_Compression_Method : Legacy_Compression_Method_Type;
         Extensions_Length : Server_Hello_Extensions_Length_Type
            then Extensions
               with Length => Extensions_Length * 8
               if Random /= (16#CF#, 16#21#, 16#AD#, 16#74#, 16#E5#, 16#9A#, 16#61#, 16#11#, 16#BE#, 16#1D#, 16#8C#, 16#02#, 16#1E#, 16#65#, 16#B8#, 16#91#, 16#C2#, 16#A2#, 16#11#, 16#16#, 16#7A#, 16#BB#, 16#8C#, 16#5E#, 16#07#, 16#9E#, 16#09#, 16#E2#, 16#C8#, 16#A8#, 16#33#, 16#9C#),
            then HRR_Extensions
               with Length => Extensions_Length * 8
               if Random = (16#CF#, 16#21#, 16#AD#, 16#74#, 16#E5#, 16#9A#, 16#61#, 16#11#, 16#BE#, 16#1D#, 16#8C#, 16#02#, 16#1E#, 16#65#, 16#B8#, 16#91#, 16#C2#, 16#A2#, 16#11#, 16#16#, 16#7A#, 16#BB#, 16#8C#, 16#5E#, 16#07#, 16#9E#, 16#09#, 16#E2#, 16#C8#, 16#A8#, 16#33#, 16#9C#);
         Extensions : SH_Extensions
            then null;
         HRR_Extensions : HRR_Extensions;
      end message;

   for Handshake use (Payload => Server_Hello)
      if Tag = HANDSHAKE_SERVER_HELLO;

   -- Server Parameters

   type Encrypted_Extensions_Length_Type is range 0 .. 2**16 - 1 with Size => 16;

   type Encrypted_Extensions is
      message
         Length : Encrypted_Extensions_Length_Type
            then Extensions
               with Length => Length * 8;
         Extensions : EE_Extensions;
      end message;

   for Handshake use (Payload => Encrypted_Extensions)
      if Tag = HANDSHAKE_ENCRYPTED_EXTENSIONS;

   type Certificate_Request_Context_Length_Type is range 0 .. 2**8 - 1 with Size => 8;
   type Certificate_Request_Extensions_Length_Type is range 2 .. 2**16 - 1 with Size => 16;

   type Certificate_Request is
      message
         Certificate_Request_Context_Length : Certificate_Request_Context_Length_Type
            then Certificate_Request_Context
               with Length => Certificate_Request_Context_Length * 8;
         Certificate_Request_Context : Payload_Type;
         Extensions_Length : Certificate_Request_Extensions_Length_Type
            then Extensions
               with Length => Extensions_Length * 8;
         Extensions : CR_Extensions;
      end message;

   for Handshake use (Payload => Certificate_Request)
      if Tag = HANDSHAKE_CERTIFICATE_REQUEST;

   -- Authentication Messages

   type Certificate_Type is (X509 => 0, RAW_PUBLIC_KEY => 2) with Size => 8;
   type ASN1_Subject_Public_Key_Info_Length_Type is range 1 .. 2**24 - 1 with Size => 24;
   type Cert_Data_Length_Type is range 1 .. 2**24 - 1 with Size => 24;
   type Certificate_Extensions_Length_Type is range 0 .. 2**16 - 1 with Size => 16;

   type Certificate_Entry is
      message
         Cert_Data_Length : Cert_Data_Length_Type
            then Cert_Data
               with Length => Cert_Data_Length * 8;
         Cert_Data : Payload_Type
            then Extensions_Length;
         Extensions_Length : Certificate_Extensions_Length_Type
            then Extensions
               with Length => Extensions_Length * 8;
         Extensions : CT_Extensions;
      end message;

   type Certificate_List_Length_Type is range 0 .. 2**24 - 1 with Size => 24;
   type Certificate_Entries is array of Certificate_Entry;

   type Certificate is
      message
         Certificate_Request_Context_Length : Certificate_Request_Context_Length_Type
            then Certificate_Request_Context
               with Length => Certificate_Request_Context_Length * 8;
         Certificate_Request_Context : Payload_Type;
         Certificate_List_Length : Certificate_List_Length_Type
            then Certificate_List
               with Length => Certificate_List_Length * 8;
         Certificate_List : Certificate_Entries;
      end message;

   for Handshake use (Payload => Certificate)
      if Tag = HANDSHAKE_CERTIFICATE;

   type Signature_Scheme is (
      RSA_PKCS1_SHA256 => 16#0401#,
      RSA_PKCS1_SHA384 => 16#0501#,
      RSA_PKCS1_SHA512 => 16#0601#,
      ECDSA_SECP256R1_SHA256 => 16#0403#,
      ECDSA_SECP384R1_SHA384 => 16#0503#,
      ECDSA_SECP521R1_SHA512 => 16#0603#,
      RSA_PSS_RSAE_SHA256 => 16#0804#,
      RSA_PSS_RSAE_SHA384 => 16#0805#,
      RSA_PSS_RSAE_SHA512 => 16#0806#,
      ED25519 => 16#0807#,
      ED448 => 16#0808#,
      RSA_PSS_PSS_SHA256 => 16#0809#,
      RSA_PSS_PSS_SHA384 => 16#080A#,
      RSA_PSS_PSS_SHA512 => 16#080B#,
      RSA_PKCS1_SHA1 => 16#0201#,
      ECDSA_SHA1 => 16#0203#
   ) with Size => 16;

   type Signature_Length_Type is range 0 .. 2**16 - 1 with Size => 16;

   type Certificate_Verify is
      message
         Algorithm : Signature_Scheme;
         Signature_Length : Signature_Length_Type
            then Signature
               with Length => Signature_Length * 8;
         Signature : Payload_Type;
      end message;

   for Handshake use (Payload => Certificate_Verify)
      if Tag = HANDSHAKE_CERTIFICATE_VERIFY;

   type Finished is
      message
         null
            then Verify_Data
               with Length => Message'Length;
         Verify_Data : Payload_Type;
      end message;

   for Handshake use (Payload => Finished)
      if Tag = HANDSHAKE_FINISHED;

   -- End of Early Data

   type End_Of_Early_Data is null message;

   for Handshake use (Payload => End_Of_Early_Data)
      if Tag = HANDSHAKE_END_OF_EARLY_DATA;

   -- Post-Handshake Messages

   type Ticket_Lifetime_Type is mod 2**32;
   type Ticket_Age_Add_Type is mod 2**32;
   type Ticket_Nonce_Length_Type is range 0 .. 255 with Size => 8;
   type Ticket_Length_Type is range 1 .. 2**16 - 1 with Size => 16;
   type New_Session_Ticket_Extensions_Length_Type is range 0 .. 2**16 - 2 with Size => 16;

   type New_Session_Ticket is
      message
         Ticket_Lifetime : Ticket_Lifetime_Type;
         Ticket_Age_Add : Ticket_Age_Add_Type;
         Ticket_Nonce_Length : Ticket_Nonce_Length_Type
            then Ticket_Nonce
               with Length => Ticket_Nonce_Length * 8;
         Ticket_Nonce : Payload_Type;
         Ticket_Length : Ticket_Length_Type
            then Ticket
               with Length => Ticket_Length * 8;
         Ticket : Payload_Type;
         Extensions_Length : New_Session_Ticket_Extensions_Length_Type
            then Extensions
               with Length => Extensions_Length * 8;
         Extensions : NST_Extensions;
      end message;

   for Handshake use (Payload => New_Session_Ticket)
      if Tag = HANDSHAKE_NEW_SESSION_TICKET;

   type Key_Update_Request is (UPDATE_NOT_REQUESTED => 0, UPDATE_REQUESTED => 1) with Size => 8;

   type Key_Update is
      message
         Request_Update : Key_Update_Request;
      end message;

   for Handshake use (Payload => Key_Update)
      if Tag = HANDSHAKE_KEY_UPDATE;

   -- Extensions

   -- -- Server Name

   type Name_Type is (HOST_NAME => 0) with Size => 8;
   type Name_Length_Type is range 1 .. 2**16 - 1 with Size => 16;

   type Server_Name is
      message
         Name_Type : Name_Type
            then Length
               if Name_Type = HOST_NAME,
            then null
               if Name_Type /= HOST_NAME;
         Length : Name_Length_Type
            then Name
               with Length => Length;
         Name : Payload_Type;
      end message;

   type Server_Name_List_Length_Type is range 1 .. 2**16 - 1 with Size => 16;
   type Server_Names is array of Server_Name;

   type Server_Name_List is
      message
         Length : Server_Name_List_Length_Type
            then Server_Name_List
               with Length => Length;
         Server_Name_List : Server_Names;
      end message;

   for CH_Extension use (Data => Server_Name_List)
      if Tag = EXTENSION_SERVER_NAME;
   for EE_Extension use (Data => Server_Name_List)
      if Tag = EXTENSION_SERVER_NAME;

   -- -- Supported Versions

   type Supported_Versions_Length_Type is range 2 .. 254 with Size => 8;
   type Protocol_Versions is array of Protocol_Version_Type;

   type Supported_Versions is
      message
         Length : Supported_Versions_Length_Type
            then Versions
               with Length => Length;
         Versions : Protocol_Versions;
      end message;

   type Supported_Version is
      message
         Version : Protocol_Version_Type;
      end message;

   for CH_Extension use (Data => Supported_Versions)
      if Tag = EXTENSION_SUPPORTED_VERSIONS;
   for SH_Extension use (Data => Supported_Version)
      if Tag = EXTENSION_SUPPORTED_VERSIONS;
   for HRR_Extension use (Data => Supported_Version)
      if Tag = EXTENSION_SUPPORTED_VERSIONS;

   -- -- Cookie

   type Cookie_Length_Type is range 1 .. 2**16 - 1 with Size => 16;

   type Cookie is
      message
         Length : Cookie_Length_Type
            then Cookie
               with Length => Length;
         Cookie : Payload_Type;
      end message;

   for CH_Extension use (Data => Cookie)
      if Tag = EXTENSION_COOKIE;
   for HRR_Extension use (Data => Cookie)
      if Tag = EXTENSION_COOKIE;

   -- -- Signature Algorithms

   type Signature_Algorithms_Length_Type is range 2 .. 2**16 - 2 with Size => 16;
   type Signature_Schemes is array of Signature_Scheme;

   type Signature_Algorithms is
      message
         Length : Signature_Algorithms_Length_Type
            then Algorithms
               with Length => Length;
         Algorithms : Signature_Schemes;
      end message;

   for CH_Extension use (Data => Signature_Algorithms)
      if Tag = EXTENSION_SIGNATURE_ALGORITHMS;
   for CR_Extension use (Data => Signature_Algorithms)
      if Tag = EXTENSION_SIGNATURE_ALGORITHMS;

   type Signature_Algorithms_Cert is
      message
         Length : Signature_Algorithms_Length_Type
            then Algorithms
               with Length => Length;
         Algorithms : Signature_Schemes;
      end message;

   for CH_Extension use (Data => Signature_Algorithms_Cert)
      if Tag = EXTENSION_SIGNATURE_ALGORITHMS_CERT;
   for CR_Extension use (Data => Signature_Algorithms_Cert)
      if Tag = EXTENSION_SIGNATURE_ALGORITHMS_CERT;

   -- -- Certificate Authorities

   type Certificate_Authorities_Length_Type is range 3 .. 2**16 - 1 with Size => 16;
   type Distinguished_Name_Length_Type is range 1 .. 2**16 - 1 with Size => 16;

   type Distinguished_Name is
      message
         Length : Distinguished_Name_Length_Type
            then Name
               with Length => Length;
         Name : Payload_Type;
      end message;

   type Distinguished_Names is array of Distinguished_Name;

   type Certificate_Authorities is
      message
         Length : Certificate_Authorities_Length_Type
            then Authorities
               with Length => Length;
         Authorities : Distinguished_Names;
      end message;

   for CH_Extension use (Data => Certificate_Authorities)
      if Tag = EXTENSION_CERTIFICATE_AUTHORITIES;
   for CR_Extension use (Data => Certificate_Authorities)
      if Tag = EXTENSION_CERTIFICATE_AUTHORITIES;

   -- -- OID Filters

   type Filters_Length_Type is range 0 .. 2**16 - 1 with Size => 16;
   type OID_Length_Type is range 1 .. 2**8 - 1 with Size => 8;
   type Values_Length_Type is range 0 .. 2**16 - 1 with Size => 16;

   type Filter is
      message
         OID_Length : OID_Length_Type
            then OID
               with Length => OID_Length;
         OID : Payload_Type;
         Values_Length : Values_Length_Type
            then Values
               with Length => Values_Length;
         Values : Payload_Type;
      end message;

   type Filters is array of Filter;

   type OID_Filters is
      message
         Length : Filters_Length_Type
            then Filters
               with Length => Length;
         Filters : Filters;
      end message;

   for CR_Extension use (Data => OID_Filters)
      if Tag = EXTENSION_OID_FILTERS;

   -- -- Post-Handshake Client Authentication

   type Post_Handshake_Auth is null message;

   for CH_Extension use (Data => Post_Handshake_Auth)
      if Tag = EXTENSION_POST_HANDSHAKE_AUTH;

   -- -- Supported Groups

   type Supported_Groups_Length_Type is range 2 .. 2**16 - 1 with Size => 16;

   type Named_Group is (
      --  Elliptic Curve Groups (ECDHE)
      SECP256R1 => 16#0017#,
      SECP384R1 => 16#0018#,
      SECP521R1 => 16#0019#,
      X25519    => 16#001D#,
      X448      => 16#001E#,
      --  Finite Field Groups (DHE)
      FFDHE2048 => 16#0100#,
      FFDHE3072 => 16#0101#,
      FFDHE4096 => 16#0102#,
      FFDHE6144 => 16#0103#,
      FFDHE8192 => 16#0104#
      ) with Size => 16;

   type Named_Groups is array of Named_Group;

   type Supported_Groups is
      message
         Length : Supported_Groups_Length_Type
            then Groups
               with Length => Length;
         Groups : Named_Groups;
      end message;

   for CH_Extension use (Data => Supported_Groups)
      if Tag = EXTENSION_SUPPORTED_GROUPS;
   for EE_Extension use (Data => Supported_Groups)
      if Tag = EXTENSION_SUPPORTED_GROUPS;

   -- -- Key Share

   type Key_Exchange_Length_Type is range 1 .. 2**16 - 1 with Size => 16;

   type Key_Share_Entry is
      message
         Group : Named_Group;
         Length : Key_Exchange_Length_Type
            then Key_Exchange
               with Length => Length;
         Key_Exchange : Payload_Type;
      end message;

   type Key_Share_Entries is array of Key_Share_Entry;

   type Key_Shares_Length_Type is range 0 .. 2**16 - 1 with Size => 16;

   type Key_Share_CH is
      message
         Length : Key_Shares_Length_Type
            then Shares
               with Length => Length;
         Shares : Key_Share_Entries;
      end message;

   type Key_Share_SH is new Key_Share_Entry;

   type Key_Share_HRR is
      message
         Selected_Group : Named_Group;
      end message;

   for CH_Extension use (Data => Key_Share_CH)
      if Tag = EXTENSION_KEY_SHARE;
   for SH_Extension use (Data => Key_Share_SH)
      if Tag = EXTENSION_KEY_SHARE;
   for HRR_Extension use (Data => Key_Share_HRR)
      if Tag = EXTENSION_KEY_SHARE;

   -- -- Pre-Shared Key Exchange Modes

   type PSK_Key_Exchange_Modes_Length_Type is range 1 .. 255 with Size => 8;
   type Key_Exchange_Mode is (PSK_KE => 0, PSK_DHE_KE => 1) with Size => 8;
   type Key_Exchange_Modes is array of Key_Exchange_Mode;

   type PSK_Key_Exchange_Modes is
      message
         Length : PSK_Key_Exchange_Modes_Length_Type
            then Modes
               with Length => Length;
         Modes : Key_Exchange_Modes;
      end message;

   for CH_Extension use (Data => PSK_Key_Exchange_Modes)
      if Tag = EXTENSION_PSK_KEY_EXCHANGE_MODES;

   -- -- Early Data Indication

   type Max_Early_Data_Size_Type is mod 2**32;

   type Early_Data_Indication is
      message
         Max_Early_Data_Size : Max_Early_Data_Size_Type;
      end message;

   type Early_Data is null message;

   for CH_Extension use (Data => Early_Data)
      if Tag = EXTENSION_EARLY_DATA;
   for EE_Extension use (Data => Early_Data)
      if Tag = EXTENSION_EARLY_DATA;
   for NST_Extension use (Data => Early_Data_Indication)
      if Tag = EXTENSION_EARLY_DATA;

   -- -- Pre-Shared Key Extension

   type Identity_Length_Type is range 1 .. 2**16 - 1 with Size => 16;
   type Obfuscated_Ticket_Age_Type is mod 2**32;

   type PSK_Identity is
      message
         Length : Identity_Length_Type
            then Identity
               with Length => Length;
         Identity : Payload_Type;
         Obfuscated_Ticket_Age : Obfuscated_Ticket_Age_Type;
      end message;

   type PSK_Identities is array of PSK_Identity;

   type PSK_Binder_Entry_Length_Type is range 32 .. 255 with Size => 8;

   type PSK_Binder_Entry is
      message
         Length : PSK_Binder_Entry_Length_Type
            then PSK_Binder_Entry
               with Length => Length;
         PSK_Binder_Entry : Payload_Type;
      end message;

   type PSK_Binder_Entries is array of PSK_Binder_Entry;

   type Identities_Length_Type is range 7 .. 2**16 - 1 with Size => 16;
   type Binders_Length_Type is range 33 .. 2**16 - 1 with Size => 16;

   type Pre_Shared_Key_CH is
      message
         Identities_Length : Identities_Length_Type
            then Identities
               with Length => Identities_Length;
         Identities : PSK_Identities;
         Binders_Length : Binders_Length_Type
            then Binders
               with Length => Binders_Length;
         Binders : PSK_Binder_Entries;
      end message;

   type Identity_Type is mod 2**16;

   type Pre_Shared_Key_SH is
      message
         Selected_Identity : Identity_Type;
      end message;

   for CH_Extension use (Data => Pre_Shared_Key_CH)
      if Tag = EXTENSION_PRE_SHARED_KEY;
   for SH_Extension use (Data => Pre_Shared_Key_SH)
      if Tag = EXTENSION_PRE_SHARED_KEY;

   -- -- Application-Layer Protocol Negotiation

   type Protocol_Name_Length_Type is range 1 .. 2**8 - 1 with Size => 8;

   type Protocol_Name is
      message
         Length : Protocol_Name_Length_Type
            then Name
               with Length => Length;
         Name : Payload;
      end message;

   type Protocol_Names is array of Protocol_Name;
   type Protocol_Name_List_Length_Type is range 2 .. 2**16 - 1 with Size => 16;

   type Protocol_Name_List is
      message
         Length : Protocol_Name_List_Length_Type
            then Protocol_Name_List
               with Length => Length;
         Protocol_Name_List : Protocol_Names;
      end message;

   for CH_Extension use (Data => Protocol_Name_List)
      if Tag = EXTENSION_APPLICATION_LAYER_PROTOCOL_NEGOTIATION;
   for EE_Extension use (Data => Protocol_Name_List)
      if Tag = EXTENSION_APPLICATION_LAYER_PROTOCOL_NEGOTIATION;

end TLS_Handshake;
